/**
 * Termy - An easily customisable web terminal built with JavaScript.
 * ==================================================================
 * Copyright (c) 2017 TheDragonRing <thedragonring.bod@gmail.com>, under the MIT License.
 */
var command = '', commandCount = 0, typePos = 0, loggedIn = !0, user = 'visitor', host = window.location.hostname || 'example.domain', commands = { help: { description: 'displays all available commands.', usage: 'help' }, man: { description: 'shows detailed information about commands.', usage: 'man &lt;command - run <i>help</i> to see all available&gt;' }, time: { description: 'displays the current time.', usage: 'time' }, google: { description: 'googles the command argumentativitities.', usage: 'google &lt;query&gt;', typed: !0 }, clear: { description: 'removes all previously run commands from the terminal.', usage: 'clear' }, exit: { description: 'logs out, to execute commands once again the page must be reloaded.', usage: 'exit', typed: !0 } }; $('head').append('<style type="text/css">a,body{color:#fff}body{background:#000;font-family:Courier}a{text-decoration:none;font-weight:700}p{margin:0}.cursor{height:3px;width:10px;margin-left:5px;margin-bottom:-1px;background:#fff;display:inline-block}</style>'), $(window).bind('load', function () { document.body.innerHTML = '<div class= "init"></div><div class="terminal"></div><div class="typed"></div>', initializeTermy() }); function initializeTermy() { var a = '<span style="color: #0f0">Welcome to ' + host + '!</span><br>'; a += '<br>', a += '>> Scanning for data... <br>', a += '>> Loading and configuring Termy... <br>', a += '<span style="margin-left:28px">==================================</span><br>', a += '>> Done! <br>', a += '<br>', a += 'This webpage is running <a href="https://github.com/TheDragonRing/termy">Termy v0.1</span>, <br>', a += 'by <a href="https://thedragonring.me">TheDragonRing</a>, licensed under the <a href="https://opensource.org/licenses/MIT">MIT License</a>.<br>', a += '<br>', a += 'Run <i>help</i> to see available commands.<br>', new Typed('.init', { strings: [a], typeSpeed: -100, showCursor: !1, onComplete: function () { shell() } }) } function displayPrefix() { $('.terminal').append('<p id="' + commandCount + '"><span style="color: #0f0">' + user + '@' + host + '</span>:<span style="color: #00f">~ $</span> <span class="input"></span><span class="cursor"></span><br></p>'), commandCount++ , $(this).scrollTop($(this).height()) } function flashingCursor() { $('.cursor').animate({ opacity: 0 }, 600).animate({ opacity: 1 }, 600) } setInterval('flashingCursor()', 1200); function shell() { displayPrefix(), $(document).on('keydown', function (a) { loggedIn && 8 === a.which && (a.preventDefault(), command = 0 === command.length ? '' : command.substr(0, command.length - 1), $(this).scrollTop($(this).height()), $('#' + (commandCount - 1) + ' .input').html(command)) }), $(window).keypress(function (a) { if (loggedIn) { var b = a.which; if (13 !== b) { var d = String.fromCharCode(b); /^[\w\d\s\.-]/i.test(d) ? null : d = d.replace(/[^\w\d\s\.-]/i, ''), command += d, $('#' + (commandCount - 1) + ' .input').append(d), $(this).scrollTop($(this).height()) } else { if (command) { $('.cursor').remove(); var f = command, g = command.split(' '), g = g.filter(function (l) { return '' !== l }); if (command = g[0].toLowerCase(), registered = [], Object.getOwnPropertyNames(commands).forEach(function (l) { registered.push(l) }), -1 === registered.indexOf(command)) $('#' + (commandCount - 1)).append('<span style="color: #f00">ERROR</span>: ' + command + ': command not found'); else { f.split(' '); g.shift(); try { window[command](g) } catch (l) { $('#' + (commandCount - 1)).append('<span style="color: #f00">ERROR</span>: ' + command + ': an error occured while running this command.') } $(this).scrollTop($(this).height()) } var k = []; Object.getOwnPropertyNames(commands).forEach(function (l) { commands[l].typed && k.push(l) }), -1 === k.indexOf(command) && (command = '', displayPrefix()) } return !1 } } }) } function stringUnderline(a, b) { var d = ''; for (let f = 0; f < a.length; f++)d += b; return '<br>' + d } function help() { var b = 'Available Commands:' + stringUnderline('Available Commands:', '-'); Object.getOwnPropertyNames(commands).forEach(function (d) { b += '<br>' + d + ': ' + commands[d].description }), $('#' + (commandCount - 1)).append(b) } function man(a) { var b = !1; Object.getOwnPropertyNames(commands).forEach(function (d) { d == a[0] && (b = 'Manual: ' + d + stringUnderline('Manual: ' + d, '-'), commands[d].description && (b += '<br> DESCRIPTION: ' + commands[d].description), commands[d].usage && (b += '<br> USAGE: ' + commands[d].usage), commands[d].information && (b += '<br> INFORMATION: ' + commands[d].information)) }), b ? $('#' + (commandCount - 1)).append(b) : $('#' + (commandCount - 1)).append('<span style="color: #f00">ERROR</span>: this command should be executed as <i>man &lt;command&gt;</i>. To see available commands run <i>help</i>.') } function clear() { $('.terminal').empty() } function exit(a, b) { loggedIn = !1, $(window).unbind('keypress'), $(window).unbind('keydown'); var d = '<br>'; d += '>> Logged out<br>', d += '>> Closed connection to ' + host + '<br>', d += b ? 'Goodbye. Thank you for using Termy.' : 'To use Termy once again, <a href="">reload the page</a>.', $(this).scrollTop($(this).height()), new Typed('.typed', { strings: [d], typeSpeed: -100, showCursor: !1, onComplete: function () { b && (window.location.href = b) } }) } function google(a) { a[0] ? exit(a, 'https://google.com/search?q=' + a.join('+')) : ($('#' + (commandCount - 1)).append('<span style="color: #f00">ERROR</span>: this command should be executed as <i>google &lt;query&gt;</i>.'), command = '') } function time() { var b = new Date, d = 12 < b.getHours() ? b.getHours() - 12 : b.getHours(); 0 === d && (d = 12); var f = 10 > b.getMinutes() ? '0' + b.getMinutes() : b.getMinutes(), g = 10 > b.getSeconds() ? '0' + b.getSeconds() : b.getSeconds(), j = 11 < b.getHours() ? 'PM' : 'AM', k = 10 > b.getDate() ? '0' + b.getDate() : b.getDate(), l = 10 > b.getMonth() + 1 ? '0' + (b.getMonth() + 1) : b.getMonth() + 1, n = b.getFullYear(), o = Intl.DateTimeFormat().resolvedOptions().timeZone, p = 10 > parseInt(Math.abs(b.getTimezoneOffset() / 60)) ? '0' + parseInt(Math.abs(b.getTimezoneOffset() / 60)) : parseInt(Math.abs(b.getTimezoneOffset() / 60)), q = 10 > Math.abs(b.getTimezoneOffset() % 60) ? '0' + Math.abs(b.getTimezoneOffset() % 60) : Math.abs(b.getTimezoneOffset() % 60), r = 0 > b.getTimezoneOffset() ? '+' + p + ':' + q : 0 < b.getTimezoneOffset() ? '-' + p + ':' + q : '00:00'; $('#' + (commandCount - 1)).append(d + ':' + f + ':' + g + ' ' + j + ', ' + k + '/' + l + '/' + n + ', ' + o + ' (GMT' + r + ')') }